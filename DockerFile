# Dockerfile

# --- Builder Stage ---
# This stage compiles the Go application into a static binary.
FROM golang:1.24-alpine AS builder

WORKDIR /app

# Copy go.mod and go.sum to leverage Docker's layer caching.
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the application source code
COPY . .

# Build the application.
# -ldflags="-w -s" strips debugging information, reducing the binary size.
# ./cmd/api is more specific and safer for future growth.
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o /app/brainloop-api ./cmd/api


# --- Final Stage ---
# Use Google's distroless image for a minimal and secure final image.
FROM gcr.io/distroless/static:nonroot

WORKDIR /app

# Copy only the compiled binary from the 'builder' stage
COPY --from=builder /app/brainloop-api .

# Expose the port that the application will listen on.
EXPOSE 8080

# Set the command to run when the container starts.
CMD ["/app/brainloop-api"]
